<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbLogo.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        RU5ErkJggg==
</value>
  </data>
</root>